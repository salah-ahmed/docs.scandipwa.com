{"version":3,"sources":["webpack:///./src/utils/createCanonicalUrl.js","webpack:///./src/utils/toCommaSeparatedList.js","webpack:///./src/templates/docs.js","webpack:///./src/components/MarkdownPage/MarkdownPage.js","webpack:///./src/components/MarkdownPage/index.js","webpack:///./node_modules/core-js/modules/es.string.link.js"],"names":["slug","urlRoot","replace","addString","list","string","push","key","length","toCommaSeparatedList","array","renderCallback","map","forEach","item","index","Docs","data","location","createLink","createLinkDocs","markdownRemark","sectionList","sectionListDocs","titlePostfix","propTypes","PropTypes","object","isRequired","pageQuery","MarkdownPage","authors","date","enableScrollSync","ogDescription","hasAuthors","titlePrefix","frontmatter","title","direction","grow","shrink","halign","css","width","flex","position","zIndex","canonicalUrl","createCanonicalUrl","fields","sharedStyles","articleLayout","container","type","marginTop","marginBottom","author","link","href","url","name","content","markdown","dangerouslySetInnerHTML","__html","html","sidebar","defaultActiveSection","findSectionForPath","pathname","$","createHTML","target","proto","forced","forcedStringHTMLMethod","this"],"mappings":"uHASe,aAACA,GAAD,OACL,MAARA,EAAe,KAAUC,IAAzB,IAAoCD,EAAKE,QAAQ,MAAO,M,mCCV1D,0BAWMC,EAAY,SAACC,EAAmBC,GAApB,OAChBD,EAAKE,KAAK,wBAAMC,IAAQH,EAAKI,OAAV,IAAoBH,GAAWA,KA2BrCI,IAzBc,SAC3BC,EACAC,GAEA,GAAID,EAAMF,QAAU,EAClB,OAAOE,EAAME,IAAID,GAGnB,IAAMP,EAAO,GAcb,OAZAM,EAAMG,SAAQ,SAACC,EAAMC,GACfA,IAAUL,EAAMF,OAAS,GAC3BL,EAAUC,EAAuB,IAAjBM,EAAMF,OAAe,QAAU,UAC/CJ,EAAKE,KAAKK,EAAeG,EAAMC,KACtBA,EAAQ,GACjBZ,EAAUC,EAAM,MAChBA,EAAKE,KAAKK,EAAeG,EAAMC,KAE/BX,EAAKE,KAAKK,EAAeG,EAAMC,OAI5BX,K,wDCpCT,kJAcMY,EAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,SAAR,OACX,gBAAC,IAAD,CAAQA,SAAUA,GAChB,gBAAC,IAAD,CACEC,WAAYC,IACZF,SAAUA,EACVG,eAAgBJ,EAAKI,eACrBC,YAAaC,IACbC,aAAa,mBAKnBR,EAAKS,UAAY,CACfR,KAAMS,IAAUC,OAAOC,YAGlB,IAAMC,EAAS,YAePb,a,yOC0FAc,IA3FM,SAAC,GAUR,IAAD,IATXC,eASW,MATD,GASC,EARXZ,EAQW,EARXA,WACAa,EAOW,EAPXA,KACAC,EAMW,EANXA,iBACAC,EAKW,EALXA,cACAhB,EAIW,EAJXA,SACAG,EAGW,EAHXA,eACAC,EAEW,EAFXA,YAEW,IADXE,oBACW,MADI,GACJ,EACLW,EAAaJ,EAAQvB,OAAS,EAC9B4B,EAAcf,EAAegB,YAAYC,OAAS,GAKxD,OACE,gBAAC,IAAD,CACEC,UAAU,SACVC,KAAK,IACLC,OAAO,IACPC,OAAO,UACPC,IAAK,CACHC,MAAO,OACPC,KAAM,WACNC,SAAU,WACVC,OAAQ,IAEV,gBAAC,IAAD,CACEb,cAAeA,EACfc,aAAcC,YAAmB5B,EAAe6B,OAAOlD,MACvDsC,MAAK,GAAKF,EAAcZ,IAE1B,uBAAKmB,IAAK,CAACE,KAAM,aACf,gBAAC,IAAD,KACE,uBAAKF,IAAKQ,IAAaC,cAAcC,WACnC,gBAAC,IAAD,CAAMC,KAAK,UAAUf,UAAU,SAASC,KAAK,IAAIE,OAAO,WACtD,gBAAC,IAAD,CAAgBJ,MAAOF,KAErBJ,GAAQG,IACR,uBACEQ,IAAK,CACHY,UAAW,GACXC,aAAc,KAEfxB,EAAM,IACNG,GACC,iCACK,IACF1B,YAAqBsB,GAAS,SAAA0B,GAAM,OACnC,qBACEd,IAAKQ,IAAaO,KAClBC,KAAMF,EAAOpB,YAAYuB,IACzBrD,IAAKkD,EAAOpB,YAAYwB,MACvBJ,EAAOpB,YAAYwB,WAQhC,uBAAKlB,IAAKQ,IAAaC,cAAcU,SACnC,uBACEnB,IAAK,CAACQ,IAAaY,UACnBC,wBAAyB,CAACC,OAAQ5C,EAAe6C,UAKvD,uBAAKvB,IAAKQ,IAAaC,cAAce,SACnC,gBAAC,IAAD,CACElC,iBAAkBA,EAClBd,WAAYA,EACZiD,qBAAsBC,YACpBnD,EAASoD,SACThD,GAEFJ,SAAUA,EACVI,YAAaA,Y,wDC5H7B,gBAQeQ,MAAf,G,kCCPA,IAAIyC,EAAI,EAAQ,QACZC,EAAa,EAAQ,QAKzBD,EAAE,CAAEE,OAAQ,SAAUC,OAAO,EAAMC,OAJN,EAAQ,OAIMC,CAAuB,SAAW,CAC3ElB,KAAM,SAAcE,GAClB,OAAOY,EAAWK,KAAM,IAAK,OAAQjB","file":"component---src-templates-docs-js-cb56df56b7034387f34a.js","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * @emails react-core\n * @flow\n */\n\nimport {urlRoot} from 'site-constants';\n\nexport default (slug: string): string | null =>\n  slug == null ? null : `${urlRoot}/${slug.replace(/^\\//, '')}`;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * @emails react-core\n * @flow\n */\n\nimport React from 'react';\n\nimport type {Node} from 'react';\n\nconst addString = (list: Array<Node>, string: string) =>\n  list.push(<span key={`${list.length}-${string}`}>{string}</span>);\n\nconst toCommaSeparatedList = (\n  array: Array<any>,\n  renderCallback: Function,\n): Array<any> => {\n  if (array.length <= 1) {\n    return array.map(renderCallback);\n  }\n\n  const list = [];\n\n  array.forEach((item, index) => {\n    if (index === array.length - 1) {\n      addString(list, array.length === 2 ? ' and ' : ', and ');\n      list.push(renderCallback(item, index));\n    } else if (index > 0) {\n      addString(list, ', ');\n      list.push(renderCallback(item, index));\n    } else {\n      list.push(renderCallback(item, index));\n    }\n  });\n\n  return list;\n};\n\nexport default toCommaSeparatedList;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * @emails react-core\n */\n\nimport MarkdownPage from 'components/MarkdownPage';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport Layout from 'components/Layout';\nimport {createLinkDocs} from 'utils/createLink';\nimport {sectionListDocs} from 'utils/sectionList';\n\nconst Docs = ({data, location}) => (\n  <Layout location={location}>\n    <MarkdownPage\n      createLink={createLinkDocs}\n      location={location}\n      markdownRemark={data.markdownRemark}\n      sectionList={sectionListDocs}\n      titlePostfix=\" &ndash; ScandiPWA\"\n    />\n  </Layout>\n);\n\nDocs.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n\nexport const pageQuery = graphql`\n  query TemplateDocsMarkdown($slug: String!) {\n    markdownRemark(fields: {slug: {eq: $slug}}) {\n      html\n      frontmatter {\n        title\n      }\n      fields {\n        path\n        slug\n      }\n    }\n  }\n`;\n\nexport default Docs;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * @emails react-core\n * @flow\n */\n\nimport Container from 'components/Container';\nimport Flex from 'components/Flex';\nimport MarkdownHeader from 'components/MarkdownHeader';\nimport React from 'react';\nimport StickyResponsiveSidebar from 'components/StickyResponsiveSidebar';\nimport TitleAndMetaTags from 'components/TitleAndMetaTags';\nimport findSectionForPath from 'utils/findSectionForPath';\nimport toCommaSeparatedList from 'utils/toCommaSeparatedList';\nimport {sharedStyles} from 'theme';\nimport createCanonicalUrl from 'utils/createCanonicalUrl';\n\nimport type {Node} from 'types';\n\ntype Props = {\n  authors: Array<string>,\n  createLink: Function, // TODO: Add better flow type once we Flow-type createLink\n  date?: string,\n  enableScrollSync?: boolean,\n  ogDescription: string,\n  location: Location,\n  markdownRemark: Node,\n  sectionList: Array<Object>, // TODO: Add better flow type once we have the Section component\n  titlePostfix: string,\n};\n\nconst getPageById = (sectionList: Array<Object>, templateFile: ?string) => {\n  if (!templateFile) {\n    return null;\n  }\n\n  const sectionItems = sectionList.map(section => section.items);\n  const flattenedSectionItems = [].concat.apply([], sectionItems);\n  const linkId = templateFile.replace('.html', '');\n\n  return flattenedSectionItems.find(item => item.id === linkId);\n};\n\nconst MarkdownPage = ({\n  authors = [],\n  createLink,\n  date,\n  enableScrollSync,\n  ogDescription,\n  location,\n  markdownRemark,\n  sectionList,\n  titlePostfix = '',\n}: Props) => {\n  const hasAuthors = authors.length > 0;\n  const titlePrefix = markdownRemark.frontmatter.title || '';\n\n  // const prev = getPageById(sectionList, markdownRemark.frontmatter.prev);\n  // const next = getPageById(sectionList, markdownRemark.frontmatter.next);\n\n  return (\n    <Flex\n      direction=\"column\"\n      grow=\"1\"\n      shrink=\"0\"\n      halign=\"stretch\"\n      css={{\n        width: '100%',\n        flex: '1 0 auto',\n        position: 'relative',\n        zIndex: 0,\n      }}>\n      <TitleAndMetaTags\n        ogDescription={ogDescription}\n        canonicalUrl={createCanonicalUrl(markdownRemark.fields.slug)}\n        title={`${titlePrefix}${titlePostfix}`}\n      />\n      <div css={{flex: '1 0 auto'}}>\n        <Container>\n          <div css={sharedStyles.articleLayout.container}>\n            <Flex type=\"article\" direction=\"column\" grow=\"1\" halign=\"stretch\">\n              <MarkdownHeader title={titlePrefix} />\n\n              {(date || hasAuthors) && (\n                <div\n                  css={{\n                    marginTop: 15,\n                    marginBottom: 10,\n                  }}>\n                  {date}{' '}\n                  {hasAuthors && (\n                    <span>\n                      by{' '}\n                      {toCommaSeparatedList(authors, author => (\n                        <a\n                          css={sharedStyles.link}\n                          href={author.frontmatter.url}\n                          key={author.frontmatter.name}>\n                          {author.frontmatter.name}\n                        </a>\n                      ))}\n                    </span>\n                  )}\n                </div>\n              )}\n\n              <div css={sharedStyles.articleLayout.content}>\n                <div\n                  css={[sharedStyles.markdown]}\n                  dangerouslySetInnerHTML={{__html: markdownRemark.html}}\n                />\n              </div>\n            </Flex>\n\n            <div css={sharedStyles.articleLayout.sidebar}>\n              <StickyResponsiveSidebar\n                enableScrollSync={enableScrollSync}\n                createLink={createLink}\n                defaultActiveSection={findSectionForPath(\n                  location.pathname,\n                  sectionList,\n                )}\n                location={location}\n                sectionList={sectionList}\n              />\n            </div>\n          </div>\n        </Container>\n      </div>\n\n    </Flex>\n  );\n};\n\nexport default MarkdownPage;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * @emails react-core\n */\n\nimport MarkdownPage from './MarkdownPage';\n\nexport default MarkdownPage;\n","'use strict';\nvar $ = require('../internals/export');\nvar createHTML = require('../internals/create-html');\nvar forcedStringHTMLMethod = require('../internals/string-html-forced');\n\n// `String.prototype.link` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.link\n$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('link') }, {\n  link: function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  }\n});\n"],"sourceRoot":""}